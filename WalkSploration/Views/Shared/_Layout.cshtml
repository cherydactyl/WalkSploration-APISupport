<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - walksploration</title>
    
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/Scripts/InitializeMap.js")
    @Styles.Render("~/Content/css")

</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("walksploration", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("Home", "Index", "Home")</li>
                    <li>@Html.ActionLink("About", "Index", "Home")</li>
                    <li>@Html.ActionLink("Contact", "Index", "Home")</li>
                </ul>
                @Html.Partial("_LoginPartial")
            </div>
        </div>
    </div>
    <div class="container body-content">
        @RenderBody()
        <hr />
        <footer>
            <p>Walksploration - a Genisys Application &copy; @DateTime.Now.Year</p>
        </footer>
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
</body>
</html>

@*Including Src code for jquery*@
<script src="//code.jquery.com/jquery-1.11.0.min.js"></script>
@*Including Src code for ajax/googleapis*@
<script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.1/jquery-ui.min.js"></script>
@*Including Src Google API Key*@
<script type="text/javascript">

    $(document).ready(function () {
        initMap();
        showValue(time);
    });


    //// Initialize Global Variables
    //var map;                                        // the actual map image to display
    ////var mapOptions;                               // holds the center, zoom and mapTypeId: bits
    //var geocoder = new google.maps.Geocoder();      // the function that will take an address and return geocoordinates
    //var position;                                   // creates the position variable
    ////var latlng;
    //var image = {                                   // Creates custom Map Pin Image and location relative to info window
    //    url: "/Images/sneakerMarker.png",
    //    anchor: new google.maps.Point(20, 15)
    //};
    //var marker;                                     // Initializes marker object
    //var infowindow;
    //// Initalize Map with Geolocation

    //function showValue(time) {
    //    document.getElementById("time-display").innerHTML = time;
    //}

    //function initializeMap() {

    //    // Creates the variable map, with the default lat and lng for Grand Circus
    //    map = new google.maps.Map(document.getElementById('map_canvas'), {
    //        center: { lat: 42.3347, lng: -83.0497 },
    //        zoom: 16
    //    });

    //    infoWindow = new google.maps.InfoWindow({ map: map });

    //    // Try HTML5 geolocation.
    //    if (navigator.geolocation) {
    //        // "Hey Geolocation! Please go find the current position and set the current lat and lng to the lat and lng vars."
    //        navigator.geolocation.getCurrentPosition(function (position) {
    //            position = {
    //                lat: position.coords.latitude,
    //                lng: position.coords.longitude
    //            };

    //            infoWindow.setPosition(position);
    //            infoWindow.setContent('Howdy, walker!');
    //            map.setCenter(position);

    //            // custom shoe marker
    //            marker = new google.maps.Marker({
    //                map: map,
    //                position: position,
    //                icon: image,
    //                animation: google.maps.Animation.DROP
    //            });
    //        },

    //        function () {
    //            handleLocationError(true, infoWindow, map.getCenter());
    //        });
    //    }
    //    else {
    //        // Browser doesn't support Geolocation
    //        handleLocationError(false, infoWindow, map.getCenter());
    //    }
    //}

    //// Default location if Geolocation is not Available
    //function handleLocationError(browserHasGeolocation, infoWindow, position) {
    //    infoWindow.setPosition(position);
    //    infoWindow.setContent(browserHasGeolocation ?
    //                          'Howdy, Grand Circus!' :
    //                          'Error: Your browser doesn\'t support geolocation.');
    //    marker = new google.maps.Marker({
    //        map: map,
    //        position: position,
    //        icon: image,
    //        animation: google.maps.Animation.DROP
    //    });
    //}

    //// Optional Bounce animation for Map Pin
    //function toggleBounce() {
    //    if (marker.getAnimation() !== null) {
    //        marker.setAnimation(null);
    //    } else {
    //        marker.setAnimation(google.maps.Animation.BOUNCE);
    //    }
    //}

    //// Adds a listener for the click event to place pin at Start Location
    //document.getElementById('submitWalk').addEventListener('click', function () {
    //    geocodeAddress(geocoder, map);
    //});

    //function geocodeAddress(geocoder, resultsMap) {
    //    var address = document.getElementById('address').value;
    //    geocoder.geocode({ 'address': address }, function (results, status) {
    //        if (status === google.maps.GeocoderStatus.OK) {
    //            resultsMap.setCenter(results[0].geometry.location);
    //            marker = new google.maps.Marker({
    //                map: resultsMap,
    //                position: results[0].geometry.location,
    //                icon: image
    //            });
    //        } else {
    //            alert('Geocode was not successful for the following reason: ' + status);
    //        }
    //    });
    //}



    ////function searchAddress() {
    ////    geocoder = new google.maps.Geocoder({ 'address': address }, function callback(results, status) {
    ////        //map.geocoder.geocode({ 'address': address }, function (results, status) {
    ////        if (status == google.maps.GeocoderStatus.OK) {
    ////            console.log(results[0]);
    ////            var lat = results[0].geometry.location.lat();
    ////            var lng = results[0].geometry.location.lng();
    ////        }
    ////    })
    ////};

    ////function callback(results, status) {
    ////    if (status == google.maps.places.PlacesServiceStatus.OK) {
    ////        var place = results[i];
    ////        var lat = results[0].geometry.location.lat();
    ////        var lng = results[0].geometry.location.lng();
    ////    }//}





    function showTime(time) {
        document.getElementById("time-display".innerHTML = time)
    }


    function initMap() {
        var map = new google.maps.Map(document.getElementById('map_canvas'), {
            center: { lat: 42.3347, lng: -83.0497 },
            zoom: 14
        });
        var input =(document.getElementById('pac-input'));
        
        var types = document.getElementById('type-selector');
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(types);

        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        var infowindow = new google.maps.InfoWindow();
        var marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29)
        });

        autocomplete.addListener('place_changed', function() {
            infowindow.close();
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                window.alert("Autocomplete's returned place contains no geometry");
                return;
            }
            // If the place has a geometry, then present it on a map.
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);  // Why 17? Because it looks good.
            }

            marker.setIcon(({
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(35, 35)
            }));
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            var address = '';
            if (place.address_components) {
                address = [
                  (place.address_components[0] && place.address_components[0].short_name || ''),
                  (place.address_components[1] && place.address_components[1].short_name || ''),
                  (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }
            infowindow.setContent('<div><strong>' + place.name + '</strong><br>' + address);
            infowindow.open(map, marker);
        });

        // Sets a listener on a radio button to change the filter type on Places
        // Autocomplete.
        function setupClickListener(id, types) {
            var radioButton = document.getElementById(id);
            radioButton.addEventListener('click', function() {
                autocomplete.setTypes(types);
            });
        }
        setupClickListener('changetype-all', []);
        setupClickListener('changetype-address', ['address']);
        setupClickListener('changetype-establishment', ['establishment']);
        setupClickListener('changetype-geocode', ['geocode']);
    }

</script>
